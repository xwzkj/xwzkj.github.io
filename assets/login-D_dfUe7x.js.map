{"version":3,"file":"login-D_dfUe7x.js","sources":["../../node_modules/naive-ui/es/divider/styles/light.mjs","../../node_modules/naive-ui/es/divider/src/styles/index.cssr.mjs","../../node_modules/naive-ui/es/divider/src/Divider.mjs","../../node_modules/naive-ui/es/qr-code/src/styles/index.cssr.mjs","../../node_modules/naive-ui/es/qr-code/styles/light.mjs","../../node_modules/naive-ui/es/qr-code/src/qrcodegen.mjs","../../node_modules/naive-ui/es/qr-code/src/QrCode.mjs","../../src/pages/login.vue"],"sourcesContent":["import { commonLight } from \"../../_styles/common/index.mjs\";\nexport const self = vars => {\n  const {\n    textColor1,\n    dividerColor,\n    fontWeightStrong\n  } = vars;\n  return {\n    textColor: textColor1,\n    color: dividerColor,\n    fontWeight: fontWeightStrong\n  };\n};\nconst dividerLight = {\n  name: 'Divider',\n  common: commonLight,\n  self\n};\nexport default dividerLight;","import { cB, cNotM, cE, cM } from \"../../../_utils/cssr/index.mjs\";\n// vars:\n// --n-bezier\n// --n-color\n// --n-text-color\n// --n-font-weight\nexport default cB('divider', `\n position: relative;\n display: flex;\n width: 100%;\n box-sizing: border-box;\n font-size: 16px;\n color: var(--n-text-color);\n transition:\n color .3s var(--n-bezier),\n background-color .3s var(--n-bezier);\n`, [cNotM('vertical', `\n margin-top: 24px;\n margin-bottom: 24px;\n `, [cNotM('no-title', `\n display: flex;\n align-items: center;\n `)]), cE('title', `\n display: flex;\n align-items: center;\n margin-left: 12px;\n margin-right: 12px;\n white-space: nowrap;\n font-weight: var(--n-font-weight);\n `), cM('title-position-left', [cE('line', [cM('left', {\n  width: '28px'\n})])]), cM('title-position-right', [cE('line', [cM('right', {\n  width: '28px'\n})])]), cM('dashed', [cE('line', `\n background-color: #0000;\n height: 0px;\n width: 100%;\n border-style: dashed;\n border-width: 1px 0 0;\n `)]), cM('vertical', `\n display: inline-block;\n height: 1em;\n margin: 0 8px;\n vertical-align: middle;\n width: 1px;\n `), cE('line', `\n border: none;\n transition: background-color .3s var(--n-bezier), border-color .3s var(--n-bezier);\n height: 1px;\n width: 100%;\n margin: 0;\n `), cNotM('dashed', [cE('line', {\n  backgroundColor: 'var(--n-color)'\n})]), cM('dashed', [cE('line', {\n  borderColor: 'var(--n-color)'\n})]), cM('vertical', {\n  backgroundColor: 'var(--n-color)'\n})]);","import { h, computed, defineComponent, Fragment } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from \"../../_mixins/index.mjs\";\nimport { dividerLight } from \"../styles/index.mjs\";\nimport style from \"./styles/index.cssr.mjs\";\nexport const dividerProps = Object.assign(Object.assign({}, useTheme.props), {\n  titlePlacement: {\n    type: String,\n    default: 'center'\n  },\n  dashed: Boolean,\n  vertical: Boolean\n});\nexport default defineComponent({\n  name: 'Divider',\n  props: dividerProps,\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Divider', '-divider', style, dividerLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          color,\n          textColor,\n          fontWeight\n        }\n      } = themeRef.value;\n      return {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-color': color,\n        '--n-text-color': textColor,\n        '--n-font-weight': fontWeight\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('divider', undefined, cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n  render() {\n    var _a;\n    const {\n      $slots,\n      titlePlacement,\n      vertical,\n      dashed,\n      cssVars,\n      mergedClsPrefix\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"div\", {\n      role: \"separator\",\n      class: [`${mergedClsPrefix}-divider`, this.themeClass, {\n        [`${mergedClsPrefix}-divider--vertical`]: vertical,\n        [`${mergedClsPrefix}-divider--no-title`]: !$slots.default,\n        [`${mergedClsPrefix}-divider--dashed`]: dashed,\n        [`${mergedClsPrefix}-divider--title-position-${titlePlacement}`]: $slots.default && titlePlacement\n      }],\n      style: cssVars\n    }, !vertical ? h(\"div\", {\n      class: `${mergedClsPrefix}-divider__line ${mergedClsPrefix}-divider__line--left`\n    }) : null, !vertical && $slots.default ? h(Fragment, null, h(\"div\", {\n      class: `${mergedClsPrefix}-divider__title`\n    }, this.$slots), h(\"div\", {\n      class: `${mergedClsPrefix}-divider__line ${mergedClsPrefix}-divider__line--right`\n    })) : null);\n  }\n});","import { c, cB } from \"../../../_utils/cssr/index.mjs\";\n// vars:\n// --n-border-radius\nexport default c([cB('qr-code', `\n background: #fff;\n border-radius: var(--n-border-radius);\n display: inline-flex;\n `)]);","import { commonLight } from \"../../_styles/common/index.mjs\";\nconst self = vars => {\n  return {\n    borderRadius: vars.borderRadius\n  };\n};\nconst themeLight = {\n  name: 'QrCode',\n  common: commonLight,\n  self\n};\nexport default themeLight;","/*\n * QR Code generator library (TypeScript)\n *\n * Copyright (c) Project Nayuki. (MIT License)\n * https://www.nayuki.io/page/qr-code-generator-library\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * - The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n * - The Software is provided \"as is\", without warranty of any kind, express or\n *   implied, including but not limited to the warranties of merchantability,\n *   fitness for a particular purpose and noninfringement. In no event shall the\n *   authors or copyright holders be liable for any claim, damages or other\n *   liability, whether in an action of contract, tort or otherwise, arising from,\n *   out of or in connection with the Software or the use or other dealings in the\n *   Software.\n */\n'use strict';\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nvar qrcodegen;\n(function (qrcodegen) {\n  /* ---- QR Code symbol class ---- */\n  /*\n   * A QR Code symbol, which is a type of two-dimension barcode.\n   * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n   * Instances of this class represent an immutable square grid of dark and light cells.\n   * The class provides static factory functions to create a QR Code from text or binary data.\n   * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n   * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n   *\n   * Ways to create a QR Code object:\n   * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n   * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n   * - Low level: Custom-make the array of data codeword bytes (including\n   *   segment headers and final padding, excluding error correction codewords),\n   *   supply the appropriate version number, and call the QrCode() constructor.\n   * (Note that all ways require supplying the desired error correction level.)\n   */\n  class QrCode {\n    /* -- Static factory functions (high level) -- */\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen.QrSegment.makeSegments(text);\n      return QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen.QrSegment.makeBytes(data);\n      return QrCode.encodeSegments([seg], ecl);\n    }\n    /* -- Static factory functions (mid level) -- */\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) {\n        throw new RangeError('Invalid value');\n      }\n      // Find the minimal version number to use\n      let version;\n      let dataUsedBits;\n      for (version = minVersion;; version++) {\n        const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits) {\n          dataUsedBits = usedBits;\n          break; // This version number is found to be suitable\n        }\n        if (version >= maxVersion) {\n          // All versions in the range could not fit the given data\n          throw new RangeError('Data too long');\n        }\n      }\n      // Increase the error correction level while the data still fits in the current version number\n      for (const newEcl of [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]) {\n        // From low to high\n        if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) {\n          ecl = newEcl;\n        }\n      }\n      // Concatenate all segments to create the data bit string\n      const bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData()) {\n          bb.push(b);\n        }\n      }\n      // Add terminator and pad up to a byte if applicable\n      const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      // Pad with alternating bytes until data capacity is reached\n      for (let padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) {\n        appendBits(padByte, 8, bb);\n      }\n      // Pack bits into bytes in big endian\n      const dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length) {\n        dataCodewords.push(0);\n      }\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      // Create the QR Code object\n      return new QrCode(version, ecl, dataCodewords, mask);\n    }\n    /* -- Constructor (low level) and fields -- */\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    version,\n    // The error correction level used in this QR Code.\n    errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      // Check scalar arguments\n      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) {\n        throw new RangeError('Version value out of range');\n      }\n      if (msk < -1 || msk > 7) {\n        throw new RangeError('Mask value out of range');\n      }\n      this.size = version * 4 + 17;\n      // Initialize both grids to be size*size arrays of Boolean false\n      const row = [];\n      for (let i = 0; i < this.size; i++) {\n        row.push(false);\n      }\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice()); // Initially all light\n        this.isFunction.push(row.slice());\n      }\n      // Compute ECC, draw modules\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      // Do masking\n      if (msk === -1) {\n        // Automatically choose best mask\n        let minPenalty = 1000000000;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i); // Undoes the mask due to XOR\n        }\n      }\n      this.mask = msk;\n      this.applyMask(msk); // Apply the final choice of mask\n      this.drawFormatBits(msk); // Overwrite old format bits\n      this.isFunction = [];\n    }\n    /* -- Accessor methods -- */\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /* -- Private helper methods for constructor: Drawing function modules -- */\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      // Draw horizontal and vertical timing patterns\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 === 0);\n        this.setFunctionModule(i, 6, i % 2 === 0);\n      }\n      // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      // Draw numerous alignment patterns\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          // Don't draw on the three finder corners\n          if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0)) {\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n          }\n        }\n      }\n      // Draw configuration data\n      this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      // Calculate error correction code and pack bits\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is uint2, mask is uint3\n      let rem = data;\n      for (let i = 0; i < 10; i++) {\n        rem = rem << 1 ^ (rem >>> 9) * 0x537;\n      }\n      const bits = (data << 10 | rem) ^ 0x5412; // uint15\n      // Draw first copy\n      for (let i = 0; i <= 5; i++) {\n        this.setFunctionModule(8, i, getBit(bits, i));\n      }\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++) {\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      }\n      // Draw second copy\n      for (let i = 0; i < 8; i++) {\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      }\n      for (let i = 8; i < 15; i++) {\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      }\n      this.setFunctionModule(8, this.size - 8, true); // Always dark\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7) {\n        return;\n      }\n      // Calculate error correction code and pack bits\n      let rem = this.version; // version is uint6, in the range [7, 40]\n      for (let i = 0; i < 12; i++) {\n        rem = rem << 1 ^ (rem >>> 11) * 0x1f25;\n      }\n      const bits = this.version << 12 | rem; // uint18\n      // Draw two copies\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n          const xx = x + dx;\n          const yy = y + dy;\n          if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size) {\n            this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4);\n          }\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++) {\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) !== 1);\n        }\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /* -- Private helper methods for constructor: Codewords and masking -- */\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length !== QrCode.getNumDataCodewords(ver, ecl)) {\n        throw new RangeError('Invalid argument');\n      }\n      // Calculate parameter numbers\n      const numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      // Split data into blocks and append ECC to each block\n      const blocks = [];\n      const rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks) {\n          dat.push(0);\n        }\n        blocks.push(dat.concat(ecc));\n      }\n      // Interleave (not concatenate) the bytes from every block into a single sequence\n      const result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          // Skip the padding byte in short blocks\n          if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks) {\n            result.push(block[i]);\n          }\n        });\n      }\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length !== Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) {\n        throw new RangeError('Invalid argument');\n      }\n      let i = 0; // Bit index into the data\n      // Do the funny zigzag scan\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        // Index of right column in each column pair\n        if (right === 6) {\n          right = 5;\n        }\n        for (let vert = 0; vert < this.size; vert++) {\n          // Vertical counter\n          for (let j = 0; j < 2; j++) {\n            const x = right - j; // Actual x coordinate\n            const upward = (right + 1 & 2) === 0;\n            const y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n            // If this QR Code has any remainder bits (0 to 7), they were assigned as\n            // 0/false/light by the constructor and are left unchanged by this method\n          }\n        }\n      }\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7) {\n        throw new RangeError('Mask value out of range');\n      }\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 === 0;\n              break;\n            case 1:\n              invert = y % 2 === 0;\n              break;\n            case 2:\n              invert = x % 3 === 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 === 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 === 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 === 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n              break;\n            default:\n              throw new Error('Unreachable');\n          }\n          if (!this.isFunction[y][x] && invert) {\n            this.modules[y][x] = !this.modules[y][x];\n          }\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      // Adjacent modules in row having same color, and finder-like patterns\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        const runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] === runColor) {\n            runX++;\n            if (runX === 5) {\n              result += QrCode.PENALTY_N1;\n            } else if (runX > 5) {\n              result++;\n            }\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor) {\n              result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            }\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\n      }\n      // Adjacent modules in column having same color, and finder-like patterns\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        const runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] === runColor) {\n            runY++;\n            if (runY === 5) {\n              result += QrCode.PENALTY_N1;\n            } else if (runY > 5) {\n              result++;\n            }\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor) {\n              result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            }\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3;\n      }\n      // 2*2 blocks of modules having same color\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1]) {\n            result += QrCode.PENALTY_N2;\n          }\n        }\n      }\n      // Balance of dark and light modules\n      let dark = 0;\n      for (const row of this.modules) {\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      }\n      const total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n      // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      result += k * QrCode.PENALTY_N4;\n      return result;\n    }\n    /* -- Private helper functions -- */\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version === 1) {\n        return [];\n      } else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        const result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step) {\n          result.splice(1, 0, pos);\n        }\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) {\n        throw new RangeError('Version number out of range');\n      }\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7) {\n          result -= 36;\n        }\n      }\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255) {\n        throw new RangeError('Degree out of range');\n      }\n      // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n      // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n      const result = [];\n      for (let i = 0; i < degree - 1; i++) {\n        result.push(0);\n      }\n      result.push(1); // Start off with the monomial x^0\n      // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n      // and drop the highest monomial term which is always 1x^degree.\n      // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        // Multiply the current product by (x - r^i)\n        for (let j = 0; j < result.length; j++) {\n          result[j] = QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length) {\n            result[j] ^= result[j + 1];\n          }\n        }\n        root = QrCode.reedSolomonMultiply(root, 0x02);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      const result = divisor.map(_ => 0);\n      for (const b of data) {\n        // Polynomial division\n        // eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 !== 0 || y >>> 8 !== 0) {\n        throw new RangeError('Byte out of range');\n      }\n      // Russian peasant multiplication\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 0x11d;\n        z ^= (y >>> i & 1) * x;\n      }\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        // Terminate dark run\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size; // Add light border to final run\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] === 0) {\n        currentRunLength += this.size;\n      } // Add light border to initial run\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  }\n  /* -- Constants and tables -- */\n  // The minimum version number supported in the QR Code Model 2 standard.\n  QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30] // High\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81] // High\n  ];\n  qrcodegen.QrCode = QrCode;\n  // Appends the given number of low-order bits of the given value\n  // to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len !== 0) {\n      throw new RangeError('Value out of range');\n    }\n    for (let i = len - 1; i >= 0; i-- // Append bit by bit\n    ) {\n      bb.push(val >>> i & 1);\n    }\n  }\n  // Returns true iff the i'th bit of x is set to 1.\n  function getBit(x, i) {\n    return (x >>> i & 1) !== 0;\n  }\n  /* ---- Data segment class ---- */\n  /*\n   * A segment of character/binary/control data in a QR Code symbol.\n   * Instances of this class are immutable.\n   * The mid-level way to create a segment is to take the payload data\n   * and call a static factory function such as QrSegment.makeNumeric().\n   * The low-level way to create a segment is to custom-make the bit buffer\n   * and call the QrSegment() constructor with appropriate values.\n   * This segment class imposes no length restrictions, but QR Codes have restrictions.\n   * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n   * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n   */\n  class QrSegment {\n    /* -- Static factory functions (mid level) -- */\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      const bb = [];\n      for (const b of data) {\n        appendBits(b, 8, bb);\n      }\n      return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!QrSegment.isNumeric(digits)) {\n        throw new RangeError('String contains non-numeric characters');\n      }\n      const bb = [];\n      for (let i = 0; i < digits.length;) {\n        // Consume up to 3 digits per iteration\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!QrSegment.isAlphanumeric(text)) {\n        throw new RangeError('String contains unencodable characters in alphanumeric mode');\n      }\n      const bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        // Process groups of 2\n        let temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length) {\n        // 1 character remaining\n        appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      }\n      return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      // Select the most efficient segment encoding automatically\n      if (text === '') {\n        return [];\n      } else if (QrSegment.isNumeric(text)) {\n        return [QrSegment.makeNumeric(text)];\n      } else if (QrSegment.isAlphanumeric(text)) {\n        return [QrSegment.makeAlphanumeric(text)];\n      } else {\n        return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n      }\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      const bb = [];\n      if (assignVal < 0) {\n        throw new RangeError('ECI assignment value out of range');\n      } else if (assignVal < 1 << 7) {\n        appendBits(assignVal, 8, bb);\n      } else if (assignVal < 1 << 14) {\n        appendBits(0b10, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1000000) {\n        appendBits(0b110, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else {\n        throw new RangeError('ECI assignment value out of range');\n      }\n      return new QrSegment(QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /* -- Constructor (low level) and fields -- */\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(\n    // The mode indicator of this segment.\n    mode,\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    numChars,\n    // The data bits of this segment. Accessed through getData().\n    bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) {\n        throw new RangeError('Invalid argument');\n      }\n      this.bitData = bitData.slice(); // Make defensive copy\n    }\n    /* -- Methods -- */\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice(); // Make defensive copy\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits) {\n          return Infinity;\n        } // The segment's length doesn't fit the field's bit width\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      const result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) !== '%') {\n          result.push(str.charCodeAt(i));\n        } else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  }\n  /* -- Constants -- */\n  // Describes precisely all strings that are encodable in numeric mode.\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+./:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  QrSegment.ALPHANUMERIC_CHARSET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n  qrcodegen.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n/* ---- Public helper enumeration ---- */\n// eslint-disable-next-line @typescript-eslint/no-namespace\n(function (qrcodegen) {\n  var QrCode;\n  (function (QrCode) {\n    /*\n     * The error correction level in a QR Code symbol. Immutable.\n     */\n    class Ecc {\n      /* -- Constructor and fields -- */\n      constructor(\n      // In the range 0 to 3 (unsigned 2-bit integer).\n      ordinal,\n      // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n      formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    }\n    /* -- Constants -- */\n    Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\n    Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\n    Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\n    Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\n    QrCode.Ecc = Ecc;\n  })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n/* ---- Public helper enumeration ---- */\n// eslint-disable-next-line @typescript-eslint/no-namespace\n(function (qrcodegen) {\n  var QrSegment;\n  (function (QrSegment) {\n    /*\n     * Describes how a segment's data bits are interpreted. Immutable.\n     */\n    class Mode {\n      /* -- Constructor and fields -- */\n      constructor(\n      // The mode indicator bits, which is a uint4 value (range 0 to 15).\n      modeBits,\n      // Number of character count bits for three different version ranges.\n      numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /* -- Method -- */\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    }\n    /* -- Constants -- */\n    Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\n    Mode.BYTE = new Mode(0x4, [8, 16, 16]);\n    Mode.KANJI = new Mode(0x8, [8, 10, 12]);\n    Mode.ECI = new Mode(0x7, [0, 0, 0]);\n    QrSegment.Mode = Mode;\n  })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nexport default qrcodegen;","import { h, ref, defineComponent, watchEffect, computed, onMounted } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from \"../../_mixins/index.mjs\";\nimport style from \"./styles/index.cssr.mjs\";\nimport { qrcodeLight } from \"../styles/index.mjs\";\nimport qrcodegen from \"./qrcodegen.mjs\";\nconst ERROR_CORRECTION_LEVEL = {\n  L: qrcodegen.QrCode.Ecc.LOW,\n  M: qrcodegen.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen.QrCode.Ecc.QUARTILE,\n  H: qrcodegen.QrCode.Ecc.HIGH\n};\nexport const qrCodeProps = Object.assign(Object.assign({}, useTheme.props), {\n  value: String,\n  color: {\n    type: String,\n    default: '#000'\n  },\n  backgroundColor: {\n    type: String,\n    default: '#FFF'\n  },\n  iconSrc: String,\n  iconSize: {\n    type: Number,\n    default: 40\n  },\n  iconBackgroundColor: {\n    type: String,\n    default: '#FFF'\n  },\n  iconBorderRadius: {\n    type: Number,\n    default: 4\n  },\n  size: {\n    type: Number,\n    default: 100\n  },\n  padding: {\n    type: [Number, String],\n    default: 12\n  },\n  errorCorrectionLevel: {\n    type: String,\n    default: 'M'\n  },\n  type: {\n    type: String,\n    default: 'canvas'\n  }\n});\n// For retina display\nconst UPSCALE_RATIO = 2;\nexport default defineComponent({\n  name: 'QrCode',\n  props: qrCodeProps,\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('QrCode', '-qr-code', style, qrcodeLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      return {\n        '--n-border-radius': themeRef.value.self.borderRadius\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('qr-code', undefined, cssVarsRef, props) : undefined;\n    const canvasRef = ref();\n    const qr = computed(() => {\n      var _a;\n      const errorCorrectionLevel = ERROR_CORRECTION_LEVEL[props.errorCorrectionLevel];\n      return qrcodegen.QrCode.encodeText((_a = props.value) !== null && _a !== void 0 ? _a : '-', errorCorrectionLevel);\n    });\n    onMounted(() => {\n      const imageLoadedTrigger = ref(0);\n      let loadedIcon = null;\n      watchEffect(() => {\n        if (props.type === 'svg') return;\n        void imageLoadedTrigger.value;\n        drawCanvas(qr.value, props.size, props.color, props.backgroundColor, loadedIcon ? {\n          icon: loadedIcon,\n          iconBorderRadius: props.iconBorderRadius,\n          iconSize: props.iconSize,\n          iconBackgroundColor: props.iconBackgroundColor\n        } : null);\n      });\n      watchEffect(() => {\n        if (props.type === 'svg') return;\n        const {\n          iconSrc\n        } = props;\n        if (iconSrc) {\n          let aborted = false;\n          const img = new Image();\n          img.src = iconSrc;\n          img.onload = () => {\n            if (aborted) return;\n            loadedIcon = img;\n            imageLoadedTrigger.value++;\n          };\n          return () => {\n            aborted = true;\n          };\n        }\n      });\n    });\n    function drawCanvas(qr, size, foregroundColor, backgroundColor, iconConfig) {\n      const canvas = canvasRef.value;\n      if (!canvas) return;\n      const canvasWidth = size * UPSCALE_RATIO;\n      const width = qr.size;\n      const scale = canvasWidth / width;\n      canvas.width = canvasWidth;\n      canvas.height = canvasWidth;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      for (let y = 0; y < qr.size; y++) {\n        for (let x = 0; x < qr.size; x++) {\n          ctx.fillStyle = qr.getModule(x, y) ? foregroundColor : backgroundColor;\n          const startX = Math.floor(x * scale);\n          const endX = Math.ceil((x + 1) * scale);\n          const startY = Math.floor(y * scale);\n          const endY = Math.ceil((y + 1) * scale);\n          ctx.fillRect(startX, startY, endX - startX, endY - startY);\n        }\n      }\n      if (iconConfig) {\n        const {\n          icon,\n          iconBackgroundColor,\n          iconBorderRadius,\n          iconSize\n        } = iconConfig;\n        const finalIconSize = iconSize * UPSCALE_RATIO;\n        const centerX = (canvas.width - finalIconSize) / 2;\n        const centerY = (canvas.height - finalIconSize) / 2;\n        ctx.fillStyle = iconBackgroundColor;\n        ctx.beginPath();\n        ctx.roundRect(centerX, centerY, finalIconSize, finalIconSize, iconBorderRadius * UPSCALE_RATIO);\n        ctx.fill();\n        const aspectRatio = icon.width / icon.height;\n        const scaledWidth = aspectRatio >= 1 ? finalIconSize : finalIconSize * aspectRatio;\n        const scaledHeight = aspectRatio <= 1 ? finalIconSize : finalIconSize / aspectRatio;\n        const left = centerX + (finalIconSize - scaledWidth) / 2;\n        const top = centerY + (finalIconSize - scaledHeight) / 2;\n        ctx.drawImage(icon, left, top, scaledWidth, scaledHeight);\n      }\n    }\n    function generatePath(modules, margin = 0) {\n      const ops = [];\n      modules.forEach(function (row, y) {\n        let start = null;\n        row.forEach(function (cell, x) {\n          if (!cell && start !== null) {\n            // M0 0h7v1H0z injects the space with the move and drops the comma,\n            // saving a char per operation\n            ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n            start = null;\n            return;\n          }\n          // end of row, clean up or skip\n          if (x === row.length - 1) {\n            if (!cell) {\n              // We would have closed the op above already so this can only mean\n              // 2+ light modules in a row.\n              return;\n            }\n            if (start === null) {\n              // Just a single dark module.\n              ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n            } else {\n              // Otherwise finish the current line.\n              ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n            }\n            return;\n          }\n          if (cell && start === null) {\n            start = x;\n          }\n        });\n      });\n      return ops.join('');\n    }\n    function svgInfo(qr, size, iconConfig) {\n      const cells = qr.getModules();\n      const numCells = cells.length;\n      const cellsToDraw = cells;\n      let svgInnerHtml = '';\n      const path1Html = `<path fill=\"transparent\" d=\"M0,0 h${numCells}v${numCells}H0z\" shape-rendering=\"crispEdges\"></path>`;\n      const path2Html = `<path fill=\"${props.color}\" d=\"${generatePath(cellsToDraw, 0)}\" shape-rendering=\"crispEdges\"></path>`;\n      let iconHtml = '';\n      if (iconConfig) {\n        const {\n          iconSrc,\n          iconSize\n        } = iconConfig;\n        const DEFAULT_IMG_SCALE = 0.1;\n        const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n        const scale = numCells / size;\n        const h = (iconSize || defaultSize) * scale;\n        const w = (iconSize || defaultSize) * scale;\n        const x = cells.length / 2 - w / 2;\n        const y = cells.length / 2 - h / 2;\n        iconHtml += `<image href=\"${iconSrc}\" width=\"${w}\" height=\"${h}\" x=\"${x}\" y=\"${y}\" preserveAspectRatio=\"none\"></image>`;\n      }\n      svgInnerHtml += path1Html;\n      svgInnerHtml += path2Html;\n      svgInnerHtml += iconHtml;\n      return {\n        innerHtml: svgInnerHtml,\n        numCells\n      };\n    }\n    const svgInfoRef = computed(() => svgInfo(qr.value, props.size, props.iconSrc ? {\n      iconSrc: props.iconSrc,\n      iconBorderRadius: props.iconBorderRadius,\n      iconSize: props.iconSize,\n      iconBackgroundColor: props.iconBackgroundColor\n    } : null));\n    return {\n      canvasRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      svgInfo: svgInfoRef\n    };\n  },\n  render() {\n    const {\n      mergedClsPrefix,\n      backgroundColor,\n      padding,\n      cssVars,\n      themeClass,\n      size,\n      type\n    } = this;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-qr-code`, themeClass],\n      style: Object.assign({\n        padding: typeof padding === 'number' ? `${padding}px` : padding,\n        backgroundColor,\n        width: `${size}px`,\n        height: `${size}px`\n      }, cssVars)\n    }, type === 'canvas' ? h(\"canvas\", {\n      ref: \"canvasRef\",\n      style: {\n        width: `${size}px`,\n        height: `${size}px`\n      }\n    }) : h(\"svg\", {\n      height: size,\n      width: size,\n      viewBox: `0 0 ${this.svgInfo.numCells} ${this.svgInfo.numCells}`,\n      role: \"img\",\n      innerHTML: this.svgInfo.innerHtml\n    }));\n  }\n});","<template>\n    <div class=\"login-container\">\n        <div class=\"login\">\n            <div class=\"login-row-qr\">\n                <div class=\"login-qr\">\n                    <n-qr-code :value=\"qrcode\" :size=\"200\" v-if=\"qrcode != ''\" />\n                    <span v-if=\"qrcode == ''\" style=\"text-align: center;color:lightgray\">等待生成二维码<br />若长时间未生成\n                        大概是炸了</span>\n                    <span v-if=\"qrcode != ''\">{{ qrStatus }}</span>\n                </div>\n            </div>\n            <div class=\"login-row-passwd\">\n                <div class=\"login-passwd\">\n                    <div style=\"width: 100%;\">\n                        <div style=\"font-size:1.5rem\">登录</div>\n                    </div>\n                    <div class=\"login-input-container\">\n                        <!-- 手机号 -->\n                        <n-input v-model:value=\"name\" class=\"login-input\" :clearable=\"true\" placeholder=\"请输入手机号\">\n                            <template #prefix>\n                                <n-icon size=\"1.2rem\">\n                                    <i-hugeicons-smart-phone-01 />\n                                </n-icon>\n                            </template>\n                        </n-input>\n                    </div>\n                    <div class=\"login-input-container\">\n                        <!-- 密码或者验证码 -->\n                        <n-input v-model:value=\"key\" class=\"login-input\"\n                            :type=\"currentMethod == 'passwd' ? 'password' : 'text'\"\n                            :placeholder=\"currentMethod == 'passwd' ? '请输入密码' : '请输入验证码'\"\n                            >\n                            <template #prefix>\n                                <n-icon size=\"1.2rem\">\n                                    <i-hugeicons-square-lock-password v-show=\"currentMethod == 'passwd'\" />\n                                    <i-hugeicons-message-lock-01 v-show=\"currentMethod == 'sms'\" />\n                                </n-icon>\n                            </template>\n                        </n-input>\n                        <n-button v-show=\"currentMethod == 'sms'\" @click=\"sendCaptcha\">获取验证码</n-button>\n                    </div>\n                    <n-button style=\"width:100%\" @click=\"login\">登录</n-button>\n                    <n-divider class=\"login-divider\">或者</n-divider>\n                    <div>\n                        <n-icon size=\"1.5rem\" class=\"login-icon login-method-icon\" v-show=\"currentMethod != 'passwd'\"\n                            @click=\"currentMethod = 'passwd'; key = ''\">\n                            <i-hugeicons-square-lock-password />\n                        </n-icon>\n                        <n-icon size=\"1.5rem\" class=\"login-icon login-method-icon\" v-show=\"currentMethod != 'sms'\"\n                            @click=\"currentMethod = 'sms'; key = ''\">\n                            <i-hugeicons-message-lock-01 />\n                        </n-icon>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup name=\"login\">\nimport * as api from '@/modules/api.js';\nimport { useRouter } from 'vue-router';\nimport { onMounted, onBeforeUnmount, ref } from 'vue';\nimport { useUserStore } from \"@/stores/user.js\";\nimport { NQrCode } from 'naive-ui';\nlet userStore = useUserStore();\nlet router = useRouter()\nlet qrcode = ref('');\nlet qrStatus = ref('等待扫码');\nlet check;//二维码状态检查定时器的id\nlet name = ref('');\nlet key = ref('');\nlet currentMethod = ref('sms');\nonMounted(() => {\n    // console.log('登录组件加载');\n    createQRcode();\n    // user.updateByCookie();//测试使用\n})\nonBeforeUnmount(() => {\n    clearInterval(check);\n})\nasync function createQRcode() {\n    let key = await api.loginQrKey();\n    // console.log('生成qrkey /login/qr/key', key.data);\n    key = key.data.data.unikey;\n    let qr = await api.loginQrCreate(key);\n    qrStatus.value = '等待扫码'\n    // console.log('生成二维码 /login/qr/create', qr.data);\n    qrcode.value = qr.data.data.qrurl;\n    check = setInterval(() => {\n        api.loginQrCheck(key)\n            .then(res => {\n                if (res.data.code == 800) {\n                    clearInterval(check);\n                    qrStatus.value = '二维码已失效'\n                    createQRcode();\n                }\n                if (res.data.code == 801) {\n                    qrStatus.value = '等待扫码'\n                }\n                if (res.data.code == 802) {\n                    qrStatus.value = '正在授权'\n                }\n                if (res.data.code == 803) {\n                    qrStatus.value = '授权成功'\n                    clearInterval(check);\n                    afterLogin(res.data.cookie);\n                }\n            })\n    }, 3000)\n}\nasync function login() {\n    if (name.value.length != 11) {\n        api.error('请输入十一位国内号码')\n        return;\n    }\n    if (key.value == '') {\n        return;\n    }\n    let res;\n    if (currentMethod.value == 'sms') {\n        res = await api.verifyCaptcha(name.value, key.value);\n        if (res.data.code != 200) {\n            api.error(JSON.stringify(res.data))\n            return;\n        }\n        res = await api.loginWithPhone(name.value, null, key.value);\n    }\n    if (currentMethod.value == 'passwd') {\n        res = await api.loginWithPhone(name.value, key.value);\n    }\n    if (res.data.code == 200) {\n        afterLogin(res.data.cookie);\n    } else {\n        api.error(JSON.stringify(res.data))\n    }\n\n}\nasync function sendCaptcha() {\n    if (name.value.length != 11) {\n        api.error('请输入十一位国内号码')\n        return;\n    }\n    let res;\n    res = await api.sendCaptcha(name.value);\n    if (res.data.code == 200) {\n        api.success(res.data.message);\n    } else {\n        api.error(JSON.stringify(res.data))\n    }\n}\n\nasync function afterLogin(cookie){\n    api.success('登陆成功~')\n    userStore.updateByCookie(cookie);\n    router.push({ 'name': 'account' });\n}\n</script>\n\n<style scoped>\n.login-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n}\n\n.login {\n    display: flex;\n    flex: 100%;\n    max-width: 45rem;\n    min-width: 20rem;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem;\n    margin: 2rem 5%;\n    height: 25rem;\n    border-radius: 2rem;\n    box-shadow: 0 0 0.5rem gray;\n}\n\n.login-passwd,\n.login-qr,\n.login-row-qr,\n.login-row-passwd {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.login-row-qr,\n.login-row-passwd {\n    margin: 2rem 0.5rem;\n}\n\n.login-icon {\n    margin: 0.5rem;\n}\n\n.login-method-icon {\n    cursor: pointer;\n}\n\n.login-divider{\n    margin: 0.5rem 0;\n}\n.login-row-qr {\n    flex: 45%;\n}\n\n.login-row-passwd {\n    flex: 55%;\n}\n\n.login-passwd {\n    width: 17rem;\n}\n\n.login-input-container {\n    margin: 0.5rem;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: center;\n    width: 100%;\n    height:2.3rem;\n}\n\n@media (max-width:640px) {\n    .login-row-qr {\n        display: none;\n    }\n}\n</style>"],"names":["self","vars","textColor1","dividerColor","fontWeightStrong","dividerLight","commonLight","style$1","cB","cNotM","cE","cM","dividerProps","useTheme","__unplugin_components_6","defineComponent","props","mergedClsPrefixRef","inlineThemeDisabled","useConfig","themeRef","style","cssVarsRef","computed","cubicBezierEaseInOut","color","textColor","fontWeight","themeClassHandle","useThemeClass","_a","$slots","titlePlacement","vertical","dashed","cssVars","mergedClsPrefix","h","Fragment","c","themeLight","qrcodegen","QrCode","text","ecl","segs","data","seg","minVersion","maxVersion","mask","boostEcl","version","dataUsedBits","dataCapacityBits","usedBits","QrSegment","newEcl","bb","appendBits","b","padByte","dataCodewords","i","errorCorrectionLevel","msk","row","allCodewords","minPenalty","penalty","x","y","alignPatPos","numAlign","j","rem","bits","getBit","a","dy","dx","dist","xx","yy","isDark","ver","numBlocks","blockEccLen","rawCodewords","numShortBlocks","shortBlockLen","blocks","rsDiv","k","dat","ecc","result","block","right","vert","invert","runColor","runX","runHistory","runY","dark","sum","total","step","pos","degree","root","divisor","_","factor","coef","z","n","core","currentRunColor","currentRunLength","val","len","digits","temp","assignVal","mode","numChars","bitData","ccbits","str","Ecc","ordinal","formatBits","Mode","modeBits","numBitsCharCount","ERROR_CORRECTION_LEVEL","qrCodeProps","UPSCALE_RATIO","NQrCode","qrcodeLight","canvasRef","ref","qr","onMounted","imageLoadedTrigger","loadedIcon","watchEffect","drawCanvas","iconSrc","aborted","img","size","foregroundColor","backgroundColor","iconConfig","canvas","canvasWidth","width","scale","ctx","startX","endX","startY","endY","icon","iconBackgroundColor","iconBorderRadius","iconSize","finalIconSize","centerX","centerY","aspectRatio","scaledWidth","scaledHeight","left","top","generatePath","modules","margin","ops","start","cell","svgInfo","cells","numCells","cellsToDraw","svgInnerHtml","path1Html","path2Html","iconHtml","defaultSize","w","svgInfoRef","padding","themeClass","type","userStore","useUserStore","router","useRouter","qrcode","qrStatus","check","name","key","currentMethod","createQRcode","onBeforeUnmount","api.loginQrKey","api.loginQrCreate","api.loginQrCheck","res","afterLogin","login","api.error","api.verifyCaptcha","api.loginWithPhone","sendCaptcha","api.sendCaptcha","api.success","cookie"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}